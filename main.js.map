{"version":3,"sources":["./src/environments/environment.ts","./projects/e-sign-lib/src/lib/models/index.ts","./projects/e-sign-lib/src/lib/mapper/certificates.mapper.ts","./projects/e-sign-lib/src/lib/e-signer.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/dialog/dialog.component.ts","./src/app/dialog/dialog.component.html","./projects/e-sign-lib/src/lib/default-data/certificates.ts","./projects/e-sign-lib/src/lib/crypto-pro.service.ts","./projects/e-sign-lib/src/lib/models/error-crypto-pro.ts","./projects/e-sign-lib/src/lib/models/crypto-pro-plugin.ts","./src/app/app-routing.module.ts","./projects/e-sign-lib/src/lib/xml-e-sign.directive.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","export * from './certificate'\nexport * from './crypto-pro-plugin'\nexport * from './error-crypto-pro'\nexport * from './sign-result.intreface'\n","import { Certificate } from '@epsr/crypto-pro';\nimport {CertificateModel} from \"../models\";\n\nexport class CertificatesMapper {\n\n  static map(src: Certificate): CertificateModel {\n    if (!src) { return null; }\n    const {\n      issuerName,\n      name,\n      thumbprint,\n      validFrom,\n      validTo\n    } = src;\n\n    const matches = issuerName.match(/CN=([^,+]*)/);\n    const normalizedName = (matches && matches.length > 0)\n      ? matches[1]\n      : issuerName;\n\n    return {\n      issuerName: normalizedName,\n      isValid: true,\n      name,\n      thumbprint,\n      validFrom,\n      validTo\n    };\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CryptoProService} from \"./crypto-pro.service\";\nimport {XMLESignDirective} from \"./xml-e-sign.directive\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [CryptoProService],\n  declarations: [XMLESignDirective],\n  exports: [XMLESignDirective]\n})\nexport class ESignerModule {\n  constructor(private cryptoService: CryptoProService ) {\n    this.cryptoService.isPluginValid().subscribe()\n  }\n}\n","import {Component, QueryList, ViewChildren} from '@angular/core';\nimport {tap} from \"rxjs/operators\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {DialogComponent} from \"./dialog/dialog.component\";\nimport {XMLESignDirective} from \"../../projects/e-sign-lib/src/lib/xml-e-sign.directive\";\nimport {CertificateModel} from \"../../projects/e-sign-lib/src/lib/models\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'e-sign';\n  @ViewChildren(XMLESignDirective) xmlESignList: QueryList<XMLESignDirective>;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  openSignDialog1() {\n    const xmlDirective = this.xmlESignList.get(0);\n    const getDialogContext = (certificates: CertificateModel[]) => {\n      return this.dialog.open(DialogComponent, {\n        width: '800px',\n        data: {\n          title: 'Sign dialog 1',\n          actionButton: {\n            label: 'Sign',\n            disabled: !xmlDirective.selectedCertificate,\n            selectionAction: (data: any) => {\n              xmlDirective.selectedCertificate = data;\n            },\n            clickAction: () => {\n              xmlDirective.sign();\n            }\n          },\n          cancelButton: {\n            label: 'Close',\n          },\n          listItems: certificates.map((cert) => ({\n            data: cert,\n            view: `\n            <span>${cert.name}</span>\n            <span>${cert.issuerName}</span>\n            <span>${cert.validTo}</span>\n            `\n          }))\n        }\n      });\n    }\n    const getPreparedJson = () => {\n      return {json: {data: 'xxx'}}\n    }\n    const certificates = xmlDirective.getCertificates();\n    const action = () => {\n      xmlDirective.jsonObject = getPreparedJson();\n      certificates.pipe(tap(getDialogContext)).subscribe()\n    }\n\n    action()\n  }\n  openSignDialog2() {\n    const xmlDirective = this.xmlESignList.get(1);\n    const getDialogContext = (certificates: CertificateModel[]) => {\n      return this.dialog.open(DialogComponent, {\n        width: '400px',\n        data: {\n          title: 'Sign dialog 2',\n          actionButton: {\n            label: 'Sign',\n            disabled: !xmlDirective.selectedCertificate,\n            selectionAction: (data: any) => {\n              xmlDirective.selectedCertificate = data;\n            },\n            clickAction: () => {\n              xmlDirective.sign();\n            }\n          },\n          cancelButton: {\n            label: 'Close',\n          },\n          listItems: certificates.map((cert) => ({\n            data: cert,\n            view: `\n            <span>${cert.name}</span>\n            <span>${cert.issuerName}</span>\n            <span>${cert.validTo}</span>\n            `\n          }))\n        }\n      });\n    }\n    const getPreparedJson = () => {\n      return {json: {data: 123}}\n    }\n    const certificates = xmlDirective.getCertificates();\n    const action = () => {\n      xmlDirective.jsonObject = getPreparedJson();\n      certificates.pipe(tap(getDialogContext)).subscribe()\n    }\n\n    action()\n  }\n\n  getSignedXML({ payload }: {payload: string}) {\n    console.log(payload)\n  }\n  getSignError({ payload }: {payload: string}) {\n    console.log(payload)\n  }\n}\n","<button\n  xml-e-sign\n  mat-raised-button\n  [isNeedDownloadFile]=\"true\"\n  (click)=\"openSignDialog1()\"\n  (successResult)=\"getSignedXML($event)\"\n  (failedResult)=\"getSignError($event)\">\n  Sign 1\n</button>\n\n<button\n  xml-e-sign\n  mat-raised-button\n  (click)=\"openSignDialog2()\"\n  (successResult)=\"getSignedXML($event)\"\n  (failedResult)=\"getSignError($event)\">\n  Sign 2\n</button>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DialogComponent } from './dialog/dialog.component';\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {ESignerModule} from \"../../projects/e-sign-lib/src/lib/e-signer.module\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    ESignerModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatListModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\n\nexport interface DialogData {\n  title: string;\n  listItems: {view: string, data: any}[];\n  actionButton: {\n    label: string;\n    disabled: boolean;\n    selectionAction: (value: any) => {};\n    clickAction: () => {};\n  };\n  cancelButton: {\n    label: string;\n  };\n}\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss']\n})\nexport class DialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit(): void {\n  }\n\n  get actionDisabled() {\n    return this.data?.actionButton?.disabled;\n  }\n\n  clickAction() {\n    return this.data?.actionButton?.clickAction() || undefined;\n  }\n\n  selectAction(data: any) {\n    this.data.actionButton.disabled = false;\n    return this.data?.actionButton?.selectionAction(data);\n  }\n\n}\n","<h1 mat-dialog-title>{{data?.title}}</h1>\n<div mat-dialog-content>\n  <mat-selection-list (selectionChange)=\"selectAction($event.option.value)\" [multiple]=\"false\">\n    <mat-list-option *ngFor=\"let item of data?.listItems\" [value]=\"item.data\">\n      <div [innerHTML]=\"item.view\"></div>\n    </mat-list-option>\n  </mat-selection-list>\n</div>\n<div mat-dialog-actions>\n  <button mat-button mat-dialog-close>{{data?.cancelButton?.label}}</button>\n  <button mat-button mat-dialog-close [disabled]=\"actionDisabled\" (click)=\"clickAction()\">{{data?.actionButton?.label}}</button>\n</div>\n","export const EMPTY_CERTIFICATE = {\n  issuerName: 'Тестовый сертификат',\n  isValid: true,\n  name: 'Test Certificate',\n  thumbprint: 'A2C5DF002CF2260D13D38186AE8C99C9BE660602',\n  validFrom: '2021-04-05T16:35:09.000Z',\n  validTo: '2021-07-05T16:45:09.000Z'\n};\n","import {Injectable} from '@angular/core';\nimport {from, Observable} from 'rxjs';\nimport {\n  createDetachedSignature,\n  createHash,\n  createXMLSignature,\n  getSystemInfo,\n  getUserCertificates,\n  isValidSystemSetup\n} from \"@epsr/crypto-pro\";\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {CryptoProPluginInfo} from \"./models\";\n\n\n@Injectable()\nexport class CryptoProService {\n\n  isPlugin = false;\n\n  constructor() {\n    // Отключить модальное окно с просьбой скачать плагин (встроенное в cadesplugin)\n    if ('cadesplugin_skip_extension_install' in window) {\n      //@ts-ignore\n      window.cadesplugin_skip_extension_install = true;\n    }\n  }\n\n  isPluginValid(): Observable<boolean> {\n    return from(isValidSystemSetup()).pipe(tap(\n      (value) => this.isPlugin = value,\n      catchError(err => {\n        this.isPlugin = false;\n        return err;\n      })\n    ));\n  }\n\n  getPluginInfo(): Observable<CryptoProPluginInfo> {\n    return from(getSystemInfo()).pipe(\n      map(info => new CryptoProPluginInfo(info))\n    );\n  }\n\n  getUserCertificates(): Observable<any[]> {\n    return new Observable(observer => from(getUserCertificates(true))\n      .subscribe(observer));\n  }\n\n  createFileSignature(thumbprint: string, fileBlob: Blob): Observable<any> {\n    return new Observable(observer => from(this.createFileDetachedSignature(thumbprint, fileBlob))\n      .subscribe(observer));\n  }\n\n  createXMLSignature(thumbprint: string, unencryptedMessage: string): Observable<any> {\n    return new Observable(observer => from(this.createXMLSignaturePromise(thumbprint, unencryptedMessage))\n      .subscribe(observer));\n  }\n\n  private async createXMLSignaturePromise(thumbprint: string, unencryptedMessage: string) {\n    return await createXMLSignature(thumbprint, unencryptedMessage);\n  }\n\n  private async createFileDetachedSignature(thumbprint: string, fileBlob: Blob) {\n    const data = await fileBlob.arrayBuffer();\n    const hash = await createHash(data);\n    return await createDetachedSignature(thumbprint, hash);\n  }\n}\n","export enum ErrorCryptoPro {\n  CertificateNotFound,\n  PluginNotFined,\n  SignNotInGOST,\n  SignError,\n  Success\n}\n","export class CryptoProPluginInfo {\n  pluginVersion: string;\n  cspVersion: string;\n\n  constructor({ cadesVersion, cspVersion }: {cadesVersion: string, cspVersion: string}) {\n    this.pluginVersion = cadesVersion;\n    this.cspVersion = cspVersion;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Directive, EventEmitter, HostListener, Input, Output} from '@angular/core';\nimport {BehaviorSubject, iif, Observable, of, throwError} from \"rxjs\";\nimport {catchError, filter, map, tap} from \"rxjs/operators\";\nimport * as JsonToXML from \"js2xmlparser\";\nimport {CryptoProService} from \"./crypto-pro.service\";\nimport {CertificatesMapper} from \"./mapper/certificates.mapper\";\nimport {EMPTY_CERTIFICATE} from \"./default-data/certificates\";\nimport {CertificateModel, ErrorCryptoPro, ISignResult} from \"./models\";\n\n@Directive({\n  selector: '[xml-e-sign]',\n  exportAs: 'xmlESign'\n})\nexport class XMLESignDirective {\n\n  /**\n   * @description Список сертификатов\n   */\n  certificates: CertificateModel[];\n\n  /**\n   * @description Выбранный сертификат\n   */\n  selectedCertificate: CertificateModel;\n\n  /**\n   * @description Плагин рабочий\n   */\n  isPluginValid = false;\n\n  /**\n   * @description Подписть в процессе\n   */\n  signInProgress = false;\n\n  /**\n   * @description События подписи (ошибки или успех)\n   */\n  signEvent$ = new BehaviorSubject<any>(null);\n\n  /**\n   * @description Флаг тестового режима (Alt + S)\n   */\n  isTestingMode = localStorage.getItem('SIGN_XML_TESTING_MODE') === 'true';\n\n  /**\n   * @description Блок в который будет положен распарсенный объект XML\n   */\n  @Input()\n  rootField = 'html';\n\n  /**\n   * @description Исходный объект\n   */\n  @Input()\n  jsonObject = {};\n\n  /**\n   * @description Флаг скачивания файла при подписи\n   */\n  @Input()\n  isNeedDownloadFile = false;\n\n  /**\n   * @description События успеха\n   */\n  @Output()\n  successResult = new EventEmitter<ISignResult>(null);\n\n  /**\n   * @description События ошибок\n   */\n  @Output()\n  failedResult = new EventEmitter<ISignResult>(null);\n\n  /**\n   * @description Вход в режим тестировщика\n   * Если не установлен плагин то Alt + S\n   * @param event\n   */\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (event.altKey && event.code === 'KeyS') {\n      this.isTestingMode = !this.isTestingMode;\n      localStorage.setItem('SIGN_XML_TESTING_MODE', String(this.isTestingMode));\n      console.log('SIGN_XML_TESTING_MODE: ', this.isTestingMode ? 'on' : 'off');\n    }\n  }\n\n  constructor(private cryptoService: CryptoProService) {\n    this.listenSignEvents();\n  }\n\n  /**\n   * @description слушатель событий подписи\n   * Внутри observable - в него пушатся события успеха или ошибки\n   * Тут они обрабатываются\n   * @private\n   */\n  public listenSignEvents() {\n    return this.signEvent$\n      .pipe(\n        filter(response => response),\n        tap((response) => {\n          const {status, payload} = response;\n          this.signInProgress = false;\n          if (status === ErrorCryptoPro.Success) {\n            this.successResult.emit({status, payload});\n            this.selectedCertificate = null;\n            if (this.isNeedDownloadFile) {\n              this.downloadFile(payload, 'signed.xml');\n            }\n            return;\n          } else {\n            // обработка ошибок\n            if (this.selectedCertificate) {\n              this.selectedCertificate.isValid = false;\n              this.selectedCertificate.class = 'disabled';\n            }\n            this.failedResult.emit({status, payload});\n            return;\n          }\n        }),\n      ).subscribe();\n  }\n\n  /**\n   * @description Проверить наличие плагина\n   */\n  checkPlugin() {\n    this.isPluginValid = this.cryptoService.isPlugin;\n\n    if (!this.isPluginValid && !this.isTestingMode) {\n      this.signEvent$.next({\n        status: ErrorCryptoPro.PluginNotFined,\n        payload: 'Требуется  КриптоПро ЭЦП Browser plug-in и установленная ЭЦП'\n      });\n    }\n  }\n\n  /**\n   * @description Если сертификат выбран\n   * @param certificate\n   */\n  onCertificateSelected(certificate: CertificateModel): void {\n    this.selectedCertificate = certificate;\n  }\n\n  /**\n   * @description Получить список сертификатов\n   */\n  getCertificates(): Observable<any> {\n    if (!this.jsonObject) {\n      return of(null);\n    }\n    const successFn = () => {\n      return this.cryptoService.getUserCertificates();\n    };\n    const failFn = () => {\n      return of(this.isTestingMode ? [EMPTY_CERTIFICATE] : []);\n    };\n    const action = () => {\n      this.checkPlugin();\n      return iif(() => this.isPluginValid,\n        successFn(),\n        failFn()\n      ).pipe(\n        map((certificates: any[]) => certificates.map(c => CertificatesMapper.map(c))),\n        tap(certificates => {\n          this.certificates = certificates;\n        }),\n        catchError(error => {\n          this.certificates = [];\n          this.signEvent$.next({\n            status: ErrorCryptoPro.PluginNotFined,\n            payload: 'Требуется  КриптоПро ЭЦП Browser plug-in и установленная ЭЦП'\n          });\n          return throwError(error);\n        })\n      );\n    };\n    return action();\n  }\n\n  /**\n   *\n   * @param text - содержимое файла (строка)\n   * @param filename - имя файла\n   * @private\n   */\n  private downloadFile(text: string, filename = 'filename.xml') {\n    const pom = document.createElement('a');\n    const bb = new Blob([text], {type: 'text/plain'});\n\n    pom.setAttribute('href', window.URL.createObjectURL(bb));\n    pom.setAttribute('download', filename);\n\n    pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');\n    pom.draggable = true;\n    pom.classList.add('dragout');\n\n    pom.click();\n    pom.remove();\n  }\n\n  /**\n   * @description пользовательский JSON в XML (без мета инфы что это xml)\n   */\n  get jsonToXml() {\n    return JsonToXML.parse(this.rootField, this.jsonObject).replace('<?xml version=\\'1.0\\'?>\\n', '');\n  }\n\n  /**\n   * @description Генерим xml, и отдаем на подпись - если мы в режиме тестирования\n   * сразу отдаем xml (буд-то он подписан)\n   */\n  public sign() {\n    const xmlData = this.jsonToXml;\n    this.signInProgress = true;\n    if (!this.selectedCertificate || this.selectedCertificate.thumbprint === EMPTY_CERTIFICATE.thumbprint) {\n      const response = this.isTestingMode ?\n        {status: ErrorCryptoPro.Success, payload: this.getXMLTemplate(xmlData, '', '', '')} :\n        {\n          status: ErrorCryptoPro.PluginNotFined,\n          payload: 'Требуется  КриптоПро ЭЦП Browser plug-in и установленная ЭЦП'\n        };\n      this.signEvent$.next(response);\n      return;\n    } else {\n      this.signXML(this.selectedCertificate.thumbprint, xmlData);\n    }\n  }\n\n  /**\n   *\n   * @param body - тело xml с данными пользователя (строка)\n   * @param b64cert - сертификат (строка)\n   * @param signMethod - метод подписи (строка)\n   * @param digestMethod - что-то для канонизации XML (строка)\n   */\n  getXMLTemplate = (body: string, b64cert: string, signMethod: string, digestMethod: string) => {\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n      '<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:u=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">' +\n      '    <s:Header>' +\n      '        <o:Security s:mustUnderstand=\"1\" xmlns:o=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" s:actor=\"http://smev.gosuslugi.ru/actors/smev\">' +\n      '            <o:BinarySecurityToken u:Id=\"uuid-ee82d445-758b-42cb-996c-666b74b60022-2\" ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">'\n      + b64cert +\n      '</o:BinarySecurityToken>' +\n      '            <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">' +\n      '                <SignedInfo>' +\n      '                    <CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />' +\n      '                    <SignatureMethod Algorithm=\"' + signMethod + '\"/>' +\n      '                    <Reference URI=\"#_1\">' +\n      '                        <Transforms>' +\n      '                            <Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />' +\n      '                        </Transforms>' +\n      '                        <DigestMethod Algorithm=\"' + digestMethod + '\"/>' +\n      '                        <DigestValue></DigestValue>' +\n      '                    </Reference>' +\n      '                </SignedInfo>' +\n      '                <SignatureValue></SignatureValue>' +\n      '                <KeyInfo>' +\n      '                    <o:SecurityTokenReference>' +\n      '                    <o:Reference ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" URI=\"#uuid-ee82d445-758b-42cb-996c-666b74b60022-2\" />' +\n      '                    </o:SecurityTokenReference>' +\n      '                </KeyInfo>' +\n      '            </Signature>' +\n      '        </o:Security>' +\n      '    </s:Header>' +\n      '    <s:Body u:Id=\"_1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">' +\n      body +\n      '    </s:Body>' +\n      '</s:Envelope>';\n  }\n\n  /**\n   *\n   * @param sCertName - имя сертификата  (строка)\n   * @param body - строка, которая допишется в xml  (строка)\n   * @private\n   */\n  private signXML(sCertName: string, body: string) {\n    // const CAPICOM_CURRENT_USER_STORE = 2;\n    // const CAPICOM_MY_STORE = 'My';\n    // const CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;\n    const CADESCOM_CONTAINER_STORE = 100;\n    const CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;\n    // const CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n    const CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2;\n    const CADESCOM_ENCODE_BASE64 = 0;\n\n    const run = () => {\n      const that = this;\n      // @ts-ignore\n      cadesplugin.async_spawn(function* (args) {\n        // Здесь следует заполнить SubjectName сертификата\n        // let sCertName = oCertName.value;\n\n        if ('' === sCertName) {\n          alert('Введите имя сертификата (CN).');\n          return;\n        }\n\n        // Ищем сертификат для подписи\n        // @ts-ignore\n        const oStore = yield cadesplugin.CreateObjectAsync('CAdESCOM.Store');\n        yield oStore.Open(CADESCOM_CONTAINER_STORE);\n\n        const oStoreCerts = yield oStore.Certificates;\n        const oCertificates = yield oStoreCerts.Find(\n          CAPICOM_CERTIFICATE_FIND_SHA1_HASH, sCertName);\n        const certsCount = yield oCertificates.Count;\n        if (certsCount === 0) {\n          that.signEvent$.next({status: ErrorCryptoPro.CertificateNotFound, payload: sCertName});\n          // alert(\"Certificate not found: \" + sCertName);\n          return;\n        }\n        const oCertificate = yield oCertificates.Item(1);\n        yield oStore.Close();\n\n        const oPublicKey = yield oCertificate.PublicKey();\n        const oAlgorithm = yield oPublicKey.Algorithm;\n        const algoOid = yield oAlgorithm.Value;\n        let signMethod = '';\n        let digestMethod = '';\n        if (algoOid === '1.2.643.7.1.1.1.1') {   // алгоритм подписи ГОСТ Р 34.10-2012 с ключом 256 бит\n          signMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256';\n          digestMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256';\n        } else if (algoOid === '1.2.643.7.1.1.1.2') {   // алгоритм подписи ГОСТ Р 34.10-2012 с ключом 512 бит\n          signMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512';\n          digestMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512';\n        } else if (algoOid === '1.2.643.2.2.19') {  // алгоритм ГОСТ Р 34.10-2001\n          signMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411';\n          digestMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411';\n        } else {\n          const errormes = 'Поддерживается XML подпись сертификатами только с алгоритмом ГОСТ Р 34.10-2012, ГОСТ Р 34.10-2001';\n          that.signEvent$.next({status: ErrorCryptoPro.SignNotInGOST, payload: errormes});\n          // alert(errormes);\n        }\n\n        let b64cert = yield oCertificate.Export(CADESCOM_ENCODE_BASE64);\n        b64cert = b64cert.replace(/[\\r\\n]/g, '');\n\n        // В шаблоне документа обязательно должны присутствовать следующие элементы:\n        // BinarySecurityToken - сертификат ключа подписи в кодировке BASE64\n        //                       атрибут Id должен содержать уникальный идентификатор\n        //                       сертификата в документе\n        // Signature - элемент с описанием свойств подписи:\n        //     SignedInfo - информация о подписываемых элементах:\n        //         CanonicalizationMethod - алгоритм приведения к каноническому виду.\n        //                                  Для СМЭВ \"http://www.w3.org/2001/10/xml-exc-c14n#\"\n        //         SignatureMethod - идентификатор алгоритма подписи.\n        //                           Для СМЭВ \"http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411\"\n        //         Reference - атрибут URI должен содержать ссылку на подписываемые элементы в вашем документе:\n        //             Transforms - преобразования, которые следует применить к подписываемым элементам.\n        //                          В примере - приведение к каноническому виду.\n        //             DigestMethod - идентификатор алгоритма хэширования.\n        //                            Для СМЭВ \"http://www.w3.org/2001/04/xmldsig-more#gostr3411\"\n        //             DigestValue - Хэш-значение подписываемых элементов. Данный элемент следует оставить пустым.\n        //                           Его значение будет заполнено при создании подписи.\n        //     SignatureValue - значение подписи. Данный элемент следует оставить пустым.\n        //                      Его значение будет заполнено при создании подписи.\n        //     KeyInfo - информация о сертификате ключа подписи\n        //         SecurityTokenReference - ссылка на сертификат\n        //             Reference - атрибут ValueType должен содержать значение\n        //                         \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n        //                         Атрибут URI должен содержать ссылку на уникальный идентификатор\n        //                         сертификата (такой же, как указан в элементе BinarySecurityToken)\n        const sContent = that.getXMLTemplate(body, b64cert, signMethod, digestMethod);\n\n        // Создаем объект CAdESCOM.CPSigner\n        // @ts-ignore\n        const oSigner = yield cadesplugin.CreateObjectAsync('CAdESCOM.CPSigner');\n        yield oSigner.propset_Certificate(oCertificate);\n        yield oSigner.propset_CheckCertificate(true);\n\n        // Создаем объект CAdESCOM.SignedXML\n        // @ts-ignore\n        const oSignedXML = yield cadesplugin.CreateObjectAsync('CAdESCOM.SignedXML');\n        yield oSignedXML.propset_Content(sContent);\n\n        // Указываем тип подписи - в данном случае по шаблону\n        yield oSignedXML.propset_SignatureType(CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE);\n\n        let sSignedMessage = '';\n        try {\n          sSignedMessage = yield oSignedXML.Sign(oSigner);\n          that.signEvent$.next({status: ErrorCryptoPro.Success, payload: sSignedMessage});\n        } catch (err) {\n          // @ts-ignore\n          that.signEvent$.next({status: ErrorCryptoPro.SignError, payload: cadesplugin.getLastError(err.message)});\n          // alert(\"Failed to create signature. Error: \" + cadesplugin.getLastError(err));\n          return;\n        }\n        // Полученный подписанный XML-документ должен проходить проверку на сайте СМЭВ\n        // console.log(sSignedMessage);\n\n\n        // Verification\n\n        // Создаем объект CAdESCOM.SignedXML\n        // @ts-ignore\n        // let oSignedXML2 = yield cadesplugin.CreateObjectAsync(\"CAdESCOM.SignedXML\");\n\n        // try {\n        //   yield oSignedXML2.Verify(sSignedMessage);\n        //   alert(\"Signature verified\");\n        // } catch (err) {\n        //   // @ts-ignore\n        //   alert(\"Failed to verify signature. Error: \" + cadesplugin.getLastError(err));\n        //   return false;\n        // }\n      });\n    };\n\n    run();\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}
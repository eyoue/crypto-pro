{"version":3,"file":"utp-e-sign-lib.js","sources":["../../../projects/e-sign-lib/src/lib/models/crypto-pro-plugin.ts","../../../projects/e-sign-lib/src/lib/models/error-crypto-pro.ts","../../../projects/e-sign-lib/src/lib/mapper/certificates.mapper.ts","../../../projects/e-sign-lib/src/lib/default-data/certificates.ts","../../../projects/e-sign-lib/src/lib/crypto-pro.service.ts","../../../projects/e-sign-lib/src/lib/xml-e-sign.directive.ts","../../../projects/e-sign-lib/src/lib/e-signer.module.ts","../../../projects/e-sign-lib/src/public-api.ts","../../../projects/e-sign-lib/src/utp-e-sign-lib.ts"],"sourcesContent":["export class CryptoProPluginInfo {\n  pluginVersion: string;\n  cspVersion: string;\n\n  constructor({ cadesVersion, cspVersion }: {cadesVersion: string, cspVersion: string}) {\n    this.pluginVersion = cadesVersion;\n    this.cspVersion = cspVersion;\n  }\n}\n","export enum ErrorCryptoPro {\n  CertificateNotFound,\n  PluginNotFined,\n  SignNotInGOST,\n  SignError,\n  Success\n}\n","import { Certificate } from '@epsr/crypto-pro';\nimport {CertificateModel} from \"../models\";\n\nexport class CertificatesMapper {\n\n  static map(src: Certificate): CertificateModel {\n    if (!src) { return null; }\n    const {\n      issuerName,\n      name,\n      thumbprint,\n      validFrom,\n      validTo\n    } = src;\n\n    const matches = issuerName.match(/CN=([^,+]*)/);\n    const normalizedName = (matches && matches.length > 0)\n      ? matches[1]\n      : issuerName;\n\n    return {\n      issuerName: normalizedName,\n      isValid: true,\n      name,\n      thumbprint,\n      validFrom,\n      validTo\n    };\n  }\n}\n","export const EMPTY_CERTIFICATE = {\n  issuerName: 'Тестовый сертификат',\n  isValid: true,\n  name: 'Test Certificate',\n  thumbprint: 'A2C5DF002CF2260D13D38186AE8C99C9BE660602',\n  validFrom: '2021-04-05T16:35:09.000Z',\n  validTo: '2021-07-05T16:45:09.000Z'\n};\n","import {Injectable} from '@angular/core';\nimport {from, Observable} from 'rxjs';\nimport {\n  createDetachedSignature,\n  createHash,\n  createXMLSignature,\n  getSystemInfo,\n  getUserCertificates,\n  isValidSystemSetup\n} from \"@epsr/crypto-pro\";\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {CryptoProPluginInfo} from \"./models\";\n\n\n@Injectable()\nexport class CryptoProService {\n\n  isPlugin = false;\n\n  constructor() {\n    // Отключить модальное окно с просьбой скачать плагин (встроенное в cadesplugin)\n    if ('cadesplugin_skip_extension_install' in window) {\n      //@ts-ignore\n      window.cadesplugin_skip_extension_install = true;\n    }\n  }\n\n  isPluginValid(): Observable<boolean> {\n    return from(isValidSystemSetup()).pipe(tap(\n      (value) => this.isPlugin = value,\n      catchError(err => {\n        this.isPlugin = false;\n        return err;\n      })\n    ));\n  }\n\n  getPluginInfo(): Observable<CryptoProPluginInfo> {\n    return from(getSystemInfo()).pipe(\n      map(info => new CryptoProPluginInfo(info))\n    );\n  }\n\n  getUserCertificates(): Observable<any[]> {\n    return new Observable(observer => from(getUserCertificates(true))\n      .subscribe(observer));\n  }\n\n  createFileSignature(thumbprint: string, fileBlob: Blob): Observable<any> {\n    return new Observable(observer => from(this.createFileDetachedSignature(thumbprint, fileBlob))\n      .subscribe(observer));\n  }\n\n  createXMLSignature(thumbprint: string, unencryptedMessage: string): Observable<any> {\n    return new Observable(observer => from(this.createXMLSignaturePromise(thumbprint, unencryptedMessage))\n      .subscribe(observer));\n  }\n\n  private async createXMLSignaturePromise(thumbprint: string, unencryptedMessage: string) {\n    return await createXMLSignature(thumbprint, unencryptedMessage);\n  }\n\n  private async createFileDetachedSignature(thumbprint: string, fileBlob: Blob) {\n    const data = await fileBlob.arrayBuffer();\n    const hash = await createHash(data);\n    return await createDetachedSignature(thumbprint, hash);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Input, Output} from '@angular/core';\nimport {BehaviorSubject, iif, Observable, of, throwError} from \"rxjs\";\nimport {catchError, filter, map, tap} from \"rxjs/operators\";\nimport * as JsonToXML from \"js2xmlparser\";\nimport {CryptoProService} from \"./crypto-pro.service\";\nimport {CertificatesMapper} from \"./mapper/certificates.mapper\";\nimport {EMPTY_CERTIFICATE} from \"./default-data/certificates\";\nimport {CertificateModel, ErrorCryptoPro, ISignResult} from \"./models\";\n\n@Directive({\n  selector: '[xml-e-sign]',\n  exportAs: 'xmlESign'\n})\nexport class XMLESignDirective {\n\n  /**\n   * @description Список сертификатов\n   */\n  certificates: CertificateModel[];\n\n  /**\n   * @description Выбранный сертификат\n   */\n  selectedCertificate: CertificateModel;\n\n  /**\n   * @description Плагин рабочий\n   */\n  isPluginValid = false;\n\n  /**\n   * @description Подписть в процессе\n   */\n  signInProgress = false;\n\n  /**\n   * @description События подписи (ошибки или успех)\n   */\n  signEvent$ = new BehaviorSubject<any>(null);\n\n  /**\n   * @description Флаг тестового режима (Alt + S)\n   */\n  isTestingMode = localStorage.getItem('SIGN_XML_TESTING_MODE') === 'true';\n\n  /**\n   * @description Блок в который будет положен распарсенный объект XML\n   */\n  @Input()\n  rootField = 'html';\n\n  /**\n   * @description Исходный объект\n   */\n  @Input()\n  jsonObject = {};\n\n  /**\n   * @description Флаг скачивания файла при подписи\n   */\n  @Input()\n  isNeedDownloadFile = false;\n\n  /**\n   * @description События успеха\n   */\n  @Output()\n  successResult = new EventEmitter<ISignResult>(null);\n\n  /**\n   * @description События ошибок\n   */\n  @Output()\n  failedResult = new EventEmitter<ISignResult>(null);\n\n  /**\n   * @description Вход в режим тестировщика\n   * Если не установлен плагин то Alt + S\n   * @param event\n   */\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (event.altKey && event.code === 'KeyS') {\n      this.isTestingMode = !this.isTestingMode;\n      localStorage.setItem('SIGN_XML_TESTING_MODE', String(this.isTestingMode));\n      console.log('SIGN_XML_TESTING_MODE: ', this.isTestingMode ? 'on' : 'off');\n    }\n  }\n\n  constructor(private cryptoService: CryptoProService) {\n    this.listenSignEvents();\n  }\n\n  /**\n   * @description слушатель событий подписи\n   * Внутри observable - в него пушатся события успеха или ошибки\n   * Тут они обрабатываются\n   * @private\n   */\n  public listenSignEvents() {\n    return this.signEvent$\n      .pipe(\n        filter(response => response),\n        tap((response) => {\n          const {status, payload} = response;\n          this.signInProgress = false;\n          if (status === ErrorCryptoPro.Success) {\n            this.successResult.emit({status, payload});\n            this.selectedCertificate = null;\n            if (this.isNeedDownloadFile) {\n              this.downloadFile(payload, 'signed.xml');\n            }\n            return;\n          } else {\n            // обработка ошибок\n            if (this.selectedCertificate) {\n              this.selectedCertificate.isValid = false;\n              this.selectedCertificate.class = 'disabled';\n            }\n            this.failedResult.emit({status, payload});\n            return;\n          }\n        }),\n      ).subscribe();\n  }\n\n  /**\n   * @description Проверить наличие плагина\n   */\n  checkPlugin() {\n    this.isPluginValid = this.cryptoService.isPlugin;\n\n    if (!this.isPluginValid && !this.isTestingMode) {\n      this.signEvent$.next({\n        status: ErrorCryptoPro.PluginNotFined,\n        payload: 'Требуется  КриптоПро ЭЦП Browser plug-in и установленная ЭЦП'\n      });\n    }\n  }\n\n  /**\n   * @description Если сертификат выбран\n   * @param certificate\n   */\n  onCertificateSelected(certificate: CertificateModel): void {\n    this.selectedCertificate = certificate;\n  }\n\n  /**\n   * @description Получить список сертификатов\n   */\n  getCertificates(): Observable<any> {\n    if (!this.jsonObject) {\n      return of(null);\n    }\n    const successFn = () => {\n      return this.cryptoService.getUserCertificates();\n    };\n    const failFn = () => {\n      return of(this.isTestingMode ? [EMPTY_CERTIFICATE] : []);\n    };\n    const action = () => {\n      this.checkPlugin();\n      return iif(() => this.isPluginValid,\n        successFn(),\n        failFn()\n      ).pipe(\n        map((certificates: any[]) => certificates.map(c => CertificatesMapper.map(c))),\n        tap(certificates => {\n          this.certificates = certificates;\n        }),\n        catchError(error => {\n          this.certificates = [];\n          this.signEvent$.next({\n            status: ErrorCryptoPro.PluginNotFined,\n            payload: 'Требуется  КриптоПро ЭЦП Browser plug-in и установленная ЭЦП'\n          });\n          return throwError(error);\n        })\n      );\n    };\n    return action();\n  }\n\n  /**\n   *\n   * @param text - содержимое файла (строка)\n   * @param filename - имя файла\n   * @private\n   */\n  private downloadFile(text: string, filename = 'filename.xml') {\n    const pom = document.createElement('a');\n    const bb = new Blob([text], {type: 'text/plain'});\n\n    pom.setAttribute('href', window.URL.createObjectURL(bb));\n    pom.setAttribute('download', filename);\n\n    pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');\n    pom.draggable = true;\n    pom.classList.add('dragout');\n\n    pom.click();\n    pom.remove();\n  }\n\n  /**\n   * @description пользовательский JSON в XML (без мета инфы что это xml)\n   */\n  get jsonToXml() {\n    return JsonToXML.parse(this.rootField, this.jsonObject).replace('<?xml version=\\'1.0\\'?>\\n', '');\n  }\n\n  /**\n   * @description Генерим xml, и отдаем на подпись - если мы в режиме тестирования\n   * сразу отдаем xml (буд-то он подписан)\n   */\n  public sign() {\n    const xmlData = this.jsonToXml;\n    this.signInProgress = true;\n    if (!this.selectedCertificate || this.selectedCertificate.thumbprint === EMPTY_CERTIFICATE.thumbprint) {\n      const response = this.isTestingMode ?\n        {status: ErrorCryptoPro.Success, payload: this.getXMLTemplate(xmlData, '', '', '')} :\n        {\n          status: ErrorCryptoPro.PluginNotFined,\n          payload: 'Требуется  КриптоПро ЭЦП Browser plug-in и установленная ЭЦП'\n        };\n      this.signEvent$.next(response);\n      return;\n    } else {\n      this.signXML(this.selectedCertificate.thumbprint, xmlData);\n    }\n  }\n\n  /**\n   *\n   * @param body - тело xml с данными пользователя (строка)\n   * @param b64cert - сертификат (строка)\n   * @param signMethod - метод подписи (строка)\n   * @param digestMethod - что-то для канонизации XML (строка)\n   */\n  getXMLTemplate = (body: string, b64cert: string, signMethod: string, digestMethod: string) => {\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n      '<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:u=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">' +\n      '    <s:Header>' +\n      '        <o:Security s:mustUnderstand=\"1\" xmlns:o=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" s:actor=\"http://smev.gosuslugi.ru/actors/smev\">' +\n      '            <o:BinarySecurityToken u:Id=\"uuid-ee82d445-758b-42cb-996c-666b74b60022-2\" ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">'\n      + b64cert +\n      '</o:BinarySecurityToken>' +\n      '            <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">' +\n      '                <SignedInfo>' +\n      '                    <CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />' +\n      '                    <SignatureMethod Algorithm=\"' + signMethod + '\"/>' +\n      '                    <Reference URI=\"#_1\">' +\n      '                        <Transforms>' +\n      '                            <Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />' +\n      '                        </Transforms>' +\n      '                        <DigestMethod Algorithm=\"' + digestMethod + '\"/>' +\n      '                        <DigestValue></DigestValue>' +\n      '                    </Reference>' +\n      '                </SignedInfo>' +\n      '                <SignatureValue></SignatureValue>' +\n      '                <KeyInfo>' +\n      '                    <o:SecurityTokenReference>' +\n      '                    <o:Reference ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" URI=\"#uuid-ee82d445-758b-42cb-996c-666b74b60022-2\" />' +\n      '                    </o:SecurityTokenReference>' +\n      '                </KeyInfo>' +\n      '            </Signature>' +\n      '        </o:Security>' +\n      '    </s:Header>' +\n      '    <s:Body u:Id=\"_1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">' +\n      body +\n      '    </s:Body>' +\n      '</s:Envelope>';\n  }\n\n  /**\n   *\n   * @param sCertName - имя сертификата  (строка)\n   * @param body - строка, которая допишется в xml  (строка)\n   * @private\n   */\n  private signXML(sCertName: string, body: string) {\n    const CAPICOM_CURRENT_USER_STORE = 2;\n    const CAPICOM_MY_STORE = 'My';\n    const CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;\n    const CAPICOM_SMART_CARD_USER_STORE = 4;\n    const CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;\n    const CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n    const CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2;\n    const CADESCOM_ENCODE_BASE64 = 0;\n\n    const run = () => {\n      const that = this;\n      // @ts-ignore\n      cadesplugin.async_spawn(function* (args) {\n        // Здесь следует заполнить SubjectName сертификата\n        // let sCertName = oCertName.value;\n\n        if ('' === sCertName) {\n          alert('Введите имя сертификата (CN).');\n          return;\n        }\n\n        // Ищем сертификат для подписи\n        // @ts-ignore\n        const oStore = yield cadesplugin.CreateObjectAsync('CAdESCOM.Store');\n        yield oStore.Open(CAPICOM_CURRENT_USER_STORE, CAPICOM_MY_STORE,\n          CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED, CAPICOM_SMART_CARD_USER_STORE);\n\n        const oStoreCerts = yield oStore.Certificates;\n        const oCertificates = yield oStoreCerts.Find(\n          CAPICOM_CERTIFICATE_FIND_SHA1_HASH, sCertName);\n        const certsCount = yield oCertificates.Count;\n        if (certsCount === 0) {\n          that.signEvent$.next({status: ErrorCryptoPro.CertificateNotFound, payload: sCertName});\n          // alert(\"Certificate not found: \" + sCertName);\n          return;\n        }\n        const oCertificate = yield oCertificates.Item(1);\n        yield oStore.Close();\n\n        const oPublicKey = yield oCertificate.PublicKey();\n        const oAlgorithm = yield oPublicKey.Algorithm;\n        const algoOid = yield oAlgorithm.Value;\n        let signMethod = '';\n        let digestMethod = '';\n        if (algoOid === '1.2.643.7.1.1.1.1') {   // алгоритм подписи ГОСТ Р 34.10-2012 с ключом 256 бит\n          signMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256';\n          digestMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256';\n        } else if (algoOid === '1.2.643.7.1.1.1.2') {   // алгоритм подписи ГОСТ Р 34.10-2012 с ключом 512 бит\n          signMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512';\n          digestMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512';\n        } else if (algoOid === '1.2.643.2.2.19') {  // алгоритм ГОСТ Р 34.10-2001\n          signMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411';\n          digestMethod = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411';\n        } else {\n          const errormes = 'Поддерживается XML подпись сертификатами только с алгоритмом ГОСТ Р 34.10-2012, ГОСТ Р 34.10-2001';\n          that.signEvent$.next({status: ErrorCryptoPro.SignNotInGOST, payload: errormes});\n          // alert(errormes);\n        }\n\n        let b64cert = yield oCertificate.Export(CADESCOM_ENCODE_BASE64);\n        b64cert = b64cert.replace(/[\\r\\n]/g, '');\n\n        // В шаблоне документа обязательно должны присутствовать следующие элементы:\n        // BinarySecurityToken - сертификат ключа подписи в кодировке BASE64\n        //                       атрибут Id должен содержать уникальный идентификатор\n        //                       сертификата в документе\n        // Signature - элемент с описанием свойств подписи:\n        //     SignedInfo - информация о подписываемых элементах:\n        //         CanonicalizationMethod - алгоритм приведения к каноническому виду.\n        //                                  Для СМЭВ \"http://www.w3.org/2001/10/xml-exc-c14n#\"\n        //         SignatureMethod - идентификатор алгоритма подписи.\n        //                           Для СМЭВ \"http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411\"\n        //         Reference - атрибут URI должен содержать ссылку на подписываемые элементы в вашем документе:\n        //             Transforms - преобразования, которые следует применить к подписываемым элементам.\n        //                          В примере - приведение к каноническому виду.\n        //             DigestMethod - идентификатор алгоритма хэширования.\n        //                            Для СМЭВ \"http://www.w3.org/2001/04/xmldsig-more#gostr3411\"\n        //             DigestValue - Хэш-значение подписываемых элементов. Данный элемент следует оставить пустым.\n        //                           Его значение будет заполнено при создании подписи.\n        //     SignatureValue - значение подписи. Данный элемент следует оставить пустым.\n        //                      Его значение будет заполнено при создании подписи.\n        //     KeyInfo - информация о сертификате ключа подписи\n        //         SecurityTokenReference - ссылка на сертификат\n        //             Reference - атрибут ValueType должен содержать значение\n        //                         \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n        //                         Атрибут URI должен содержать ссылку на уникальный идентификатор\n        //                         сертификата (такой же, как указан в элементе BinarySecurityToken)\n        const sContent = that.getXMLTemplate(body, b64cert, signMethod, digestMethod);\n\n        // Создаем объект CAdESCOM.CPSigner\n        // @ts-ignore\n        const oSigner = yield cadesplugin.CreateObjectAsync('CAdESCOM.CPSigner');\n        yield oSigner.propset_Certificate(oCertificate);\n        yield oSigner.propset_CheckCertificate(true);\n\n        // Создаем объект CAdESCOM.SignedXML\n        // @ts-ignore\n        const oSignedXML = yield cadesplugin.CreateObjectAsync('CAdESCOM.SignedXML');\n        yield oSignedXML.propset_Content(sContent);\n\n        // Указываем тип подписи - в данном случае по шаблону\n        yield oSignedXML.propset_SignatureType(CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE);\n\n        let sSignedMessage = '';\n        try {\n          sSignedMessage = yield oSignedXML.Sign(oSigner);\n          that.signEvent$.next({status: ErrorCryptoPro.Success, payload: sSignedMessage});\n        } catch (err) {\n          // @ts-ignore\n          that.signEvent$.next({status: ErrorCryptoPro.SignError, payload: cadesplugin.getLastError(err.message)});\n          // alert(\"Failed to create signature. Error: \" + cadesplugin.getLastError(err));\n          return;\n        }\n        // Полученный подписанный XML-документ должен проходить проверку на сайте СМЭВ\n        // console.log(sSignedMessage);\n\n\n        // Verification\n\n        // Создаем объект CAdESCOM.SignedXML\n        // @ts-ignore\n        // let oSignedXML2 = yield cadesplugin.CreateObjectAsync(\"CAdESCOM.SignedXML\");\n\n        // try {\n        //   yield oSignedXML2.Verify(sSignedMessage);\n        //   alert(\"Signature verified\");\n        // } catch (err) {\n        //   // @ts-ignore\n        //   alert(\"Failed to verify signature. Error: \" + cadesplugin.getLastError(err));\n        //   return false;\n        // }\n      });\n    };\n\n    run();\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CryptoProService} from \"./crypto-pro.service\";\nimport {XMLESignDirective} from \"./xml-e-sign.directive\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [CryptoProService],\n  declarations: [XMLESignDirective],\n  exports: [XMLESignDirective]\n})\nexport class ESignerModule {\n  constructor(private cryptoService: CryptoProService ) {\n    this.cryptoService.isPluginValid().subscribe()\n  }\n}\n","/*\n * Public API Surface of e-sign-lib\n */\n\nexport * as models from './lib/models/index';\nexport * from './lib/xml-e-sign.directive';\nexport * from './lib/crypto-pro.service';\nexport * from './lib/e-signer.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["JsonToXML.parse"],"mappings":"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"}